# -*- coding: utf-8 -*-
"""Prompt generation application.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10AniM_Ngb2FazgVktmV73O-L4Y0qFrn_
"""

pip install streamlit openai

"""When running this code in Streamlit, the user will be provided with a UI to input the domain and goal of their prompt. GPT will then suggest questions to further narrow down the details needed for prompt generation. Once the details are gathered, GPT will generate a prompt, which the user can then test. Feedback can be provided for prompt refinement."""

import streamlit as st
import openai

# Initialize OpenAI GPT (ensure you have API key set up)
openai.api_key = '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'

st.title("Perfect Prompt Generator with GPT Assistance")

# Initial user input
domain = st.text_input("What domain/topic is your prompt related to?")
goal = st.text_input("What's the primary goal of your prompt? (e.g., gather information, inspire creativity)")

# GPT Interaction
response = openai.Completion.create(
  model="text-davinci-002",
  prompt=f"Given the domain '{domain}' and goal '{goal}', what further details should I ask the user to generate a perfect prompt?",
  max_tokens=150
)
questions = response.choices[0].text.strip().split('\n')
details = []
for q in questions:
    answer = st.text_input(q)
    details.append(answer)

# Generate the prompt
prompt_response = openai.Completion.create(
  model="text-davinci-002",
  prompt=f"Based on the details {details}, generate a suitable prompt for the domain '{domain}'.",
  max_tokens=100
)
generated_prompt = prompt_response.choices[0].text.strip()
st.write(f"Generated Prompt: {generated_prompt}")

# Test the prompt
test_response = st.text_area("Test the prompt with a sample response:")

# Refinement Phase
feedback = st.text_input("Any feedback or refinements needed for the prompt?")
if feedback:
    refined_response = openai.Completion.create(
      model="text-davinci-002",
      prompt=f"Refine the prompt '{generated_prompt}' based on feedback: '{feedback}'.",
      max_tokens=100
    )
    refined_prompt = refined_response.choices[0].text.strip()
    st.write(f"Refined Prompt: {refined_prompt}")

st.write("Thank you for using the Perfect Prompt Generator!")